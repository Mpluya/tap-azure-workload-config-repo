apiVersion: kapp.k14s.io/v1alpha1
kind: Config
rebaseRules:
- path:
  - spec
  - replicas
  type: copy
  sources:
  - existing
  - new
  resourceMatchers:
  - apiGroupKindMatcher:
      apiGroup: apps
      kind: Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-with-sso
  annotations:
    kapp.k14s.io/update-strategy: fallback-on-replace
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: server-with-sso
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server-with-sso
    app.kubernetes.io/component: run
    carto.run/workload-name: server-with-sso
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: run
      app.kubernetes.io/part-of: server-with-sso
      apps.tanzu.vmware.com/auto-configure-actuators: "true"
      apps.tanzu.vmware.com/has-tests: "true"
      apps.tanzu.vmware.com/workload-type: server-with-sso
      carto.run/workload-name: server-with-sso
      conventions.carto.run/framework: spring-boot
      tanzu.app.live.view: "true"
      tanzu.app.live.view.application.actuator.path: actuator
      tanzu.app.live.view.application.actuator.port: "8081"
      tanzu.app.live.view.application.flavours: spring-boot
      tanzu.app.live.view.application.name: server-with-sso
  template:
    metadata:
      annotations:
        apps.tanzu.vmware.com/correlationid: https://github.com/x95castle1/friday-java-web-app?sub_path=/
        apps.tanzu.vmware.com/git-sha: 3a78a520c6a0ab1dc8704f45e960e4918f8d06b3
        boot.spring.io/actuator: http://:8081/actuator
        boot.spring.io/version: 2.7.18
        conventions.carto.run/applied-conventions: |-
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/is-native-app-check
          spring-boot-convention/is-prometheus-enabled-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-graceful-shutdown
          spring-boot-convention/spring-boot-web
          spring-boot-convention/spring-boot-actuator
          spring-boot-convention/spring-boot-actuator-probes
          spring-boot-convention/app-live-view-appflavour-check
          spring-boot-convention/app-live-view-connector-boot
          spring-boot-convention/app-live-view-appflavours-boot
        developer.conventions/target-containers: workload
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: server-with-sso
        apps.tanzu.vmware.com/auto-configure-actuators: "true"
        apps.tanzu.vmware.com/has-tests: "true"
        apps.tanzu.vmware.com/workload-type: server-with-sso
        carto.run/workload-name: server-with-sso
        conventions.carto.run/framework: spring-boot
        tanzu.app.live.view: "true"
        tanzu.app.live.view.application.actuator.path: actuator
        tanzu.app.live.view.application.actuator.port: "8081"
        tanzu.app.live.view.application.flavours: spring-boot
        tanzu.app.live.view.application.name: server-with-sso
    spec:
      containers:
      - env:
        - name: JAVA_TOOL_OPTIONS
          value: -Dmanagement.endpoint.health.probes.add-additional-paths="true" -Dmanagement.endpoint.health.show-details="always" -Dmanagement.endpoints.web.base-path="/actuator" -Dmanagement.endpoints.web.exposure.include="*" -Dmanagement.health.probes.enabled="true" -Dmanagement.server.port="8081" -Dserver.port="8080" -Dserver.shutdown.grace-period="24s"
        image: cxscssa.azurecr.io/tap-build/workloads/server-with-sso-jeremy@sha256:3615ee21682dc7d40592d5737c19bbc6205f20bfd6a4e5ec6b29ee92b4ec2b60
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
      serviceAccountName: default
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/component: run
            app.kubernetes.io/part-of: server-with-sso
            apps.tanzu.vmware.com/auto-configure-actuators: "true"
            apps.tanzu.vmware.com/has-tests: "true"
            apps.tanzu.vmware.com/workload-type: server-with-sso
            carto.run/workload-name: server-with-sso
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
---
apiVersion: v1
kind: Service
metadata:
  name: server-with-sso
  labels:
    app.kubernetes.io/part-of: server-with-sso
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server-with-sso
    app.kubernetes.io/component: run
    carto.run/workload-name: server-with-sso
spec:
  selector:
    app.kubernetes.io/component: run
    app.kubernetes.io/part-of: server-with-sso
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server-with-sso
    carto.run/workload-name: server-with-sso
    conventions.carto.run/framework: spring-boot
    tanzu.app.live.view: "true"
    tanzu.app.live.view.application.actuator.path: actuator
    tanzu.app.live.view.application.actuator.port: "8081"
    tanzu.app.live.view.application.flavours: spring-boot
    tanzu.app.live.view.application.name: server-with-sso
  ports:
  - targetPort: 8080
    port: 8080
    name: "8080"
  - targetPort: 8080
    port: 80
    name: http
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: server-with-sso
  annotations:
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: server-with-sso
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server-with-sso
    app.kubernetes.io/component: run
    carto.run/workload-name: server-with-sso
spec:
  routes:
  - services:
    - name: server-with-sso
      port: 80
    loadBalancerPolicy:
      strategy: Cookie
  virtualhost:
    fqdn: server-with-sso
    tls:
      secretName: kube-system/wildcard-cert
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: server-with-sso
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: server-with-sso
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65

